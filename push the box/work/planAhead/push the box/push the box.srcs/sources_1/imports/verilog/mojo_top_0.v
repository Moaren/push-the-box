/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [7:0] row,
    output reg [7:0] c_red,
    output reg [7:0] c_blue,
    output reg [7:0] c_green,
    input up,
    input down,
    input left,
    input right,
    input reset
  );
  
  
  
  reg rst;
  
  wire [64-1:0] M_logic_outyellow;
  wire [64-1:0] M_logic_outred;
  wire [64-1:0] M_logic_outblue;
  wire [64-1:0] M_logic_outgreen;
  reg [1-1:0] M_logic_up;
  reg [1-1:0] M_logic_down;
  reg [1-1:0] M_logic_left;
  reg [1-1:0] M_logic_right;
  reg [1-1:0] M_logic_reset;
  logic_1 logic (
    .clk(clk),
    .rst(rst),
    .up(M_logic_up),
    .down(M_logic_down),
    .left(M_logic_left),
    .right(M_logic_right),
    .reset(M_logic_reset),
    .outyellow(M_logic_outyellow),
    .outred(M_logic_outred),
    .outblue(M_logic_outblue),
    .outgreen(M_logic_outgreen)
  );
  
  wire [8-1:0] M_display_c_red;
  wire [8-1:0] M_display_c_blue;
  wire [8-1:0] M_display_c_green;
  wire [8-1:0] M_display_row;
  reg [64-1:0] M_display_red;
  reg [64-1:0] M_display_blue;
  reg [64-1:0] M_display_green;
  reg [64-1:0] M_display_yellow;
  display_2 display (
    .clk(clk),
    .rst(rst),
    .red(M_display_red),
    .blue(M_display_blue),
    .green(M_display_green),
    .yellow(M_display_yellow),
    .c_red(M_display_c_red),
    .c_blue(M_display_c_blue),
    .c_green(M_display_c_green),
    .row(M_display_row)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_up_con_out;
  reg [1-1:0] M_up_con_in;
  button_conditioner_4 up_con (
    .clk(clk),
    .in(M_up_con_in),
    .out(M_up_con_out)
  );
  wire [1-1:0] M_down_con_out;
  reg [1-1:0] M_down_con_in;
  button_conditioner_4 down_con (
    .clk(clk),
    .in(M_down_con_in),
    .out(M_down_con_out)
  );
  wire [1-1:0] M_left_con_out;
  reg [1-1:0] M_left_con_in;
  button_conditioner_4 left_con (
    .clk(clk),
    .in(M_left_con_in),
    .out(M_left_con_out)
  );
  wire [1-1:0] M_right_con_out;
  reg [1-1:0] M_right_con_in;
  button_conditioner_4 right_con (
    .clk(clk),
    .in(M_right_con_in),
    .out(M_right_con_out)
  );
  wire [1-1:0] M_reset_con_out;
  reg [1-1:0] M_reset_con_in;
  button_conditioner_4 reset_con (
    .clk(clk),
    .in(M_reset_con_in),
    .out(M_reset_con_out)
  );
  wire [1-1:0] M_up_edge_out;
  reg [1-1:0] M_up_edge_in;
  edge_detector_9 up_edge (
    .clk(clk),
    .in(M_up_edge_in),
    .out(M_up_edge_out)
  );
  wire [1-1:0] M_down_edge_out;
  reg [1-1:0] M_down_edge_in;
  edge_detector_9 down_edge (
    .clk(clk),
    .in(M_down_edge_in),
    .out(M_down_edge_out)
  );
  wire [1-1:0] M_left_edge_out;
  reg [1-1:0] M_left_edge_in;
  edge_detector_9 left_edge (
    .clk(clk),
    .in(M_left_edge_in),
    .out(M_left_edge_out)
  );
  wire [1-1:0] M_right_edge_out;
  reg [1-1:0] M_right_edge_in;
  edge_detector_9 right_edge (
    .clk(clk),
    .in(M_right_edge_in),
    .out(M_right_edge_out)
  );
  wire [1-1:0] M_reset_edge_out;
  reg [1-1:0] M_reset_edge_in;
  edge_detector_9 reset_edge (
    .clk(clk),
    .in(M_reset_edge_in),
    .out(M_reset_edge_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_up_con_in = up;
    M_down_con_in = down;
    M_left_con_in = left;
    M_right_con_in = right;
    M_reset_con_in = reset;
    M_up_edge_in = M_up_con_out;
    M_down_edge_in = M_down_con_out;
    M_left_edge_in = M_left_con_out;
    M_right_edge_in = M_right_con_out;
    M_reset_edge_in = M_reset_con_out;
    M_logic_up = M_up_edge_out;
    M_logic_down = M_down_edge_out;
    M_logic_left = M_left_edge_out;
    M_logic_right = M_right_edge_out;
    M_logic_reset = M_reset_edge_out;
    M_display_red = M_logic_outred;
    M_display_blue = M_logic_outblue;
    M_display_green = M_logic_outgreen;
    M_display_yellow = M_logic_outyellow;
    row = M_display_row;
    c_red = M_display_c_red;
    c_blue = M_display_c_blue;
    c_green = M_display_c_green;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
endmodule
