/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module logic_1 (
    input clk,
    input rst,
    output reg [63:0] outyellow,
    output reg [63:0] outred,
    output reg [63:0] outblue,
    output reg [63:0] outgreen,
    input up,
    input down,
    input left,
    input right,
    input reset
  );
  
  
  
  wire [1-1:0] M_map_out;
  wire [64-1:0] M_map_map_boundary;
  wire [64-1:0] M_map_box;
  wire [64-1:0] M_map_destinations;
  wire [3-1:0] M_map_start_row;
  wire [3-1:0] M_map_start_col;
  wire [3-1:0] M_map_bound_left;
  wire [3-1:0] M_map_bound_right;
  wire [3-1:0] M_map_bound_up;
  wire [3-1:0] M_map_bound_down;
  reg [3-1:0] M_map_round_number;
  map_14 map (
    .round_number(M_map_round_number),
    .out(M_map_out),
    .map_boundary(M_map_map_boundary),
    .box(M_map_box),
    .destinations(M_map_destinations),
    .start_row(M_map_start_row),
    .start_col(M_map_start_col),
    .bound_left(M_map_bound_left),
    .bound_right(M_map_bound_right),
    .bound_up(M_map_bound_up),
    .bound_down(M_map_bound_down)
  );
  
  wire [64-1:0] M_number_number_map;
  reg [3-1:0] M_number_output_number;
  number_15 number (
    .output_number(M_number_output_number),
    .number_map(M_number_number_map)
  );
  
  wire [8-1:0] M_timer_out;
  reg [1-1:0] M_timer_tozero;
  timer_16 timer (
    .clk(clk),
    .rst(rst),
    .tozero(M_timer_tozero),
    .out(M_timer_out)
  );
  
  wire [64-1:0] M_animation_out_start;
  wire [64-1:0] M_animation_out_win;
  animation_17 animation (
    .clk(clk),
    .rst(rst),
    .out_start(M_animation_out_start),
    .out_win(M_animation_out_win)
  );
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [1-1:0] M_alu_overflow;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_18 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .overflow(M_alu_overflow)
  );
  
  reg [63:0] M_box_d, M_box_q = 1'h0;
  
  reg [63:0] M_destinations_d, M_destinations_q = 1'h0;
  
  reg [63:0] M_map_boundary_d, M_map_boundary_q = 1'h0;
  
  reg [2:0] M_round_number_d, M_round_number_q = 1'h0;
  
  reg [2:0] M_now_position_row_d, M_now_position_row_q = 2'h3;
  
  reg [2:0] M_now_position_col_d, M_now_position_col_q = 2'h3;
  
  reg [63:0] M_check_result_d, M_check_result_q = 1'h0;
  
  wire [3-1:0] M_counter_check_value;
  counter_19 counter_check (
    .clk(clk),
    .rst(rst),
    .value(M_counter_check_value)
  );
  
  reg [2:0] start_row;
  
  reg [2:0] start_col;
  
  reg [2:0] bound_left;
  
  reg [2:0] bound_right;
  
  reg [2:0] bound_up;
  
  reg [2:0] bound_down;
  
  localparam START_state = 3'd0;
  localparam RUNNING_state = 3'd1;
  localparam TO_NEXT_ROUND_state = 3'd2;
  localparam SHOWROUND_state = 3'd3;
  localparam ROUND_START_state = 3'd4;
  localparam FINALSUCCESS_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_map_boundary_d = M_map_boundary_q;
    M_destinations_d = M_destinations_q;
    M_check_result_d = M_check_result_q;
    M_now_position_col_d = M_now_position_col_q;
    M_now_position_row_d = M_now_position_row_q;
    M_box_d = M_box_q;
    M_round_number_d = M_round_number_q;
    
    bound_left = M_map_bound_left;
    bound_right = M_map_bound_right;
    bound_up = M_map_bound_up;
    bound_down = M_map_bound_down;
    M_map_round_number = 1'h0;
    M_number_output_number = M_round_number_q;
    start_row = M_map_start_row;
    start_col = M_map_start_col;
    outyellow = 64'h0000000000000000;
    outred = 64'h0000000000000000;
    outblue = 64'h0000000000000000;
    outgreen = 64'h0000000000000000;
    M_timer_tozero = 1'h0;
    M_alu_alufn = 6'h00;
    M_alu_a = 16'h0000;
    M_alu_b = 16'h0000;
    if (M_state_q == START_state) begin
      M_round_number_d = 1'h0;
      outyellow = M_animation_out_start;
      if (reset) begin
        M_state_d = SHOWROUND_state;
      end
    end
    if (M_state_q == TO_NEXT_ROUND_state) begin
      M_alu_alufn = 6'h00;
      M_alu_a = M_round_number_q;
      M_alu_b = 2'h1;
      M_round_number_d = M_alu_out;
      M_state_d = SHOWROUND_state;
    end
    if (M_state_q == SHOWROUND_state) begin
      M_alu_alufn = 6'h32;
      M_alu_a = M_round_number_q;
      M_alu_b = 16'h0006;
      if (M_alu_out == 1'h1) begin
        M_state_d = FINALSUCCESS_state;
        M_timer_tozero = 1'h1;
      end else begin
        M_number_output_number = M_round_number_q + 1'h1;
        outyellow = M_number_number_map;
        if (M_timer_out == 4'hf) begin
          M_state_d = ROUND_START_state;
          M_timer_tozero = 1'h1;
        end else begin
          if (reset) begin
            M_state_d = ROUND_START_state;
            M_timer_tozero = 1'h1;
          end
        end
      end
    end
    if (M_state_q == ROUND_START_state) begin
      M_map_round_number = M_round_number_q;
      M_box_d = M_map_box;
      M_destinations_d = M_map_destinations;
      M_map_boundary_d = M_map_map_boundary;
      start_row = M_map_start_row;
      start_col = M_map_start_col;
      outred = M_map_boundary_q;
      outblue = M_box_q;
      outgreen = M_destinations_q;
      M_state_d = RUNNING_state;
      M_now_position_row_d = 3'h7 - start_row;
      M_now_position_col_d = 3'h7 - start_col;
      M_check_result_d = 64'hffffffffffffffff;
    end
    if (M_state_q == RUNNING_state) begin
      if (up) begin
        if (M_now_position_row_q + 1'h1 >= bound_up && M_map_boundary_q[(M_now_position_row_q + 1'h1)*8+(M_now_position_col_q)*1+0-:1] == 1'h0) begin
          if (M_box_q[(M_now_position_row_q + 1'h1)*8+(M_now_position_col_q)*1+0-:1] == 1'h0) begin
            M_now_position_row_d = M_now_position_row_q + 1'h1;
            outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
            outyellow[(M_now_position_row_q - 1'h1)*8+(M_now_position_col_q)*1+0-:1] = 1'h0;
          end else begin
            if (M_now_position_row_q + 2'h2 >= bound_up && M_map_boundary_q[(M_now_position_row_q + 2'h2)*8+(M_now_position_col_q)*1+0-:1] == 1'h0 && M_box_q[(M_now_position_row_q + 2'h2)*8+(M_now_position_col_q)*1+0-:1] == 1'h0) begin
              M_box_d[(M_now_position_row_q + 1'h1)*8+(M_now_position_col_q)*1+0-:1] = 1'h0;
              M_box_d[(M_now_position_row_q + 2'h2)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
              M_now_position_row_d = M_now_position_row_q + 1'h1;
              outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
              outyellow[(M_now_position_row_q - 1'h1)*8+(M_now_position_col_q)*1+0-:1] = 1'h0;
            end
          end
        end
      end else begin
        if (down) begin
          if (M_now_position_row_q - 1'h1 <= bound_down && M_map_boundary_q[(M_now_position_row_q - 1'h1)*8+(M_now_position_col_q)*1+0-:1] == 1'h0) begin
            if (M_box_q[(M_now_position_row_q - 1'h1)*8+(M_now_position_col_q)*1+0-:1] == 1'h0) begin
              M_now_position_row_d = M_now_position_row_q - 1'h1;
              outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
              outyellow[(M_now_position_row_q + 1'h1)*8+(M_now_position_col_q)*1+0-:1] = 1'h0;
            end else begin
              if (M_now_position_row_q - 2'h2 <= bound_down && M_map_boundary_q[(M_now_position_row_q - 2'h2)*8+(M_now_position_col_q)*1+0-:1] == 1'h0 && M_box_q[(M_now_position_row_q - 2'h2)*8+(M_now_position_col_q)*1+0-:1] == 1'h0) begin
                M_box_d[(M_now_position_row_q - 1'h1)*8+(M_now_position_col_q)*1+0-:1] = 1'h0;
                M_box_d[(M_now_position_row_q - 2'h2)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
                M_now_position_row_d = M_now_position_row_q - 1'h1;
                outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
                outyellow[(M_now_position_row_q + 1'h1)*8+(M_now_position_col_q)*1+0-:1] = 1'h0;
              end
            end
          end
        end else begin
          if (left) begin
            if (M_now_position_col_q - 1'h1 >= bound_left && M_map_boundary_q[(M_now_position_row_q)*8+(M_now_position_col_q - 1'h1)*1+0-:1] == 1'h0) begin
              if (M_box_q[(M_now_position_row_q)*8+(M_now_position_col_q - 1'h1)*1+0-:1] == 1'h0) begin
                M_now_position_col_d = M_now_position_col_q - 1'h1;
                outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
                outyellow[(M_now_position_row_q)*8+(M_now_position_col_q + 1'h1)*1+0-:1] = 1'h0;
              end else begin
                if (M_now_position_row_q - 2'h2 >= bound_left && M_map_boundary_q[(M_now_position_row_q)*8+(M_now_position_col_q - 2'h2)*1+0-:1] == 1'h0 && M_box_q[(M_now_position_row_q)*8+(M_now_position_col_q - 2'h2)*1+0-:1] == 1'h0) begin
                  M_box_d[(M_now_position_row_q)*8+(M_now_position_col_q - 1'h1)*1+0-:1] = 1'h0;
                  M_box_d[(M_now_position_row_q)*8+(M_now_position_col_q - 2'h2)*1+0-:1] = 1'h1;
                  M_now_position_col_d = M_now_position_col_q - 1'h1;
                  outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
                  outyellow[(M_now_position_row_q)*8+(M_now_position_col_q + 1'h1)*1+0-:1] = 1'h0;
                end
              end
            end
          end else begin
            if (right) begin
              if (M_now_position_col_q + 1'h1 <= bound_right && M_map_boundary_q[(M_now_position_row_q)*8+(M_now_position_col_q + 1'h1)*1+0-:1] == 1'h0) begin
                if (M_box_q[(M_now_position_row_q)*8+(M_now_position_col_q + 1'h1)*1+0-:1] == 1'h0) begin
                  M_now_position_col_d = M_now_position_col_q + 1'h1;
                  outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
                  outyellow[(M_now_position_row_q)*8+(M_now_position_col_q - 1'h1)*1+0-:1] = 1'h0;
                end else begin
                  if (M_now_position_row_q + 2'h2 <= bound_right && M_map_boundary_q[(M_now_position_row_q)*8+(M_now_position_col_q + 2'h2)*1+0-:1] == 1'h0 && M_box_q[(M_now_position_row_q)*8+(M_now_position_col_q + 2'h2)*1+0-:1] == 1'h0) begin
                    M_box_d[(M_now_position_row_q)*8+(M_now_position_col_q + 1'h1)*1+0-:1] = 1'h0;
                    M_box_d[(M_now_position_row_q)*8+(M_now_position_col_q + 2'h2)*1+0-:1] = 1'h1;
                    M_now_position_col_d = M_now_position_col_q + 1'h1;
                    outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
                    outyellow[(M_now_position_row_q)*8+(M_now_position_col_q - 1'h1)*1+0-:1] = 1'h0;
                  end
                end
              end
            end
          end
        end
      end
      outred = M_map_boundary_q;
      outblue = M_box_q;
      outgreen = M_destinations_q;
      outyellow[(M_now_position_row_q)*8+(M_now_position_col_q)*1+0-:1] = 1'h1;
      if (reset) begin
        M_round_number_d = M_round_number_q;
        M_state_d = ROUND_START_state;
      end
      M_alu_alufn = 6'h16;
      M_alu_a = M_box_q[(M_counter_check_value)*8+7-:8];
      M_alu_b = M_destinations_q[(M_counter_check_value)*8+7-:8];
      M_check_result_d[(M_counter_check_value)*8+7-:8] = M_alu_out;
      if (M_check_result_q == 64'h0000000000000000) begin
        M_timer_tozero = 1'h1;
        M_state_d = TO_NEXT_ROUND_state;
      end
    end
    if (M_state_q == FINALSUCCESS_state) begin
      outyellow = M_animation_out_win;
      if (reset) begin
        M_state_d = START_state;
        M_timer_tozero = 1'h1;
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_round_number_q <= 1'h0;
    end else begin
      M_round_number_q <= M_round_number_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_now_position_col_q <= 2'h3;
    end else begin
      M_now_position_col_q <= M_now_position_col_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_box_q <= 1'h0;
    end else begin
      M_box_q <= M_box_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_now_position_row_q <= 2'h3;
    end else begin
      M_now_position_row_q <= M_now_position_row_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_destinations_q <= 1'h0;
    end else begin
      M_destinations_q <= M_destinations_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_check_result_q <= 1'h0;
    end else begin
      M_check_result_q <= M_check_result_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_map_boundary_q <= 1'h0;
    end else begin
      M_map_boundary_q <= M_map_boundary_d;
    end
  end
  
endmodule
